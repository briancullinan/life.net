using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Messages
{
    public class SanitizedStream : StreamReader
    {
        public SanitizedStream(Stream stream)
            : base(stream, true)
        {

        }
        private const int EOF = -1;

        public override int Read([In, Out] char[] buffer, int index, int count)
        {
            var total = 0;
            int illegals;
            var newBuffer = new char[buffer.Length];
            do
            {
                var result = base.Read(newBuffer, index, count);
                illegals = 0;
                var j = 0;
                for (var i = index; i < index + result; i++)
                {
                    if (IsLegalXmlChar(newBuffer[i]))
                    {
                        buffer[index + j] = newBuffer[i];
                        j++;
                        continue;
                    }
                    illegals++;
                }
                index = j;
                count = illegals;
                total += result - illegals;
            } while (illegals > 0);

            return total;
        }

        public override int ReadBlock(char[] buffer, int index, int count)
        {
            return base.ReadBlock(buffer, index, count);
        }

        public override string ReadLine()
        {
            return base.ReadLine();
        }

        public override string ReadToEnd()
        {
            return base.ReadToEnd();
        }

        public override int Read()
        {
            // Read each char, skipping ones XML has prohibited

            int nextCharacter;

            do
            {
                // Read a character

                if ((nextCharacter = base.Read()) == EOF)
                {
                    // If the char denotes end of file, stop
                    break;
                }
            }

            // Skip char if it's illegal, and try the next

            while (!IsLegalXmlChar(nextCharacter));

            return nextCharacter;
        }

        public override int Peek()
        {
            // Return next legal XML char w/o reading it

            int nextCharacter;

            do
            {
                // See what the next character is
                nextCharacter = base.Peek();
            }
            while
            (
                // If it's illegal, skip over
                // and try the next.

                !IsLegalXmlChar(nextCharacter) &&
                (nextCharacter = base.Read()) != EOF
            );

            return nextCharacter;

        }

        public static bool IsLegalXmlChar(int character)
        {
            return
            (
                 character == 0x9 /* == '\t' == 9   */          ||
                 character == 0xA /* == '\n' == 10  */          ||
                 character == 0xD /* == '\r' == 13  */          ||
                (character >= 0x20 && character <= 0xD7FF) ||
                (character >= 0xE000 && character <= 0xFFFD) ||
                (character >= 0x10000 && character <= 0x10FFFF)
            );
        }
    }
}
