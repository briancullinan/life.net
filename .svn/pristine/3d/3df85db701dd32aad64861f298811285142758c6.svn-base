using System.Collections.Specialized;
using System.Linq;
using System.Windows;
using QuickGraph;

namespace Life.Controls
{
    /// <summary>
    /// Interaction logic for Settings.xaml
    /// </summary>
    public partial class Settings
    {
        public Settings()
        {
            InitializeComponent();
            _graph.Clear();
            lock (App.Triggers)
            {
                foreach (var trigger in App.Triggers)
                {
                    _graph.AddVertex(trigger);
                }
                App.Triggers.CollectionChanged += TriggersOnCollectionChanged;
            }
            lock (App.Activities)
            {
                foreach (var activity in App.Activities)
                {
                    _graph.AddVertex(activity);
                }
                App.Activities.CollectionChanged += ActivitiesOnCollectionChanged;
            }
            CreateVertices();
        }

        private readonly BidirectionalGraph<object, IEdge<object>> _graph = new BidirectionalGraph<object, IEdge<object>>();
        public IBidirectionalGraph<object, IEdge<object>> Graph
        {
            get { return _graph; }
        }

        private void CreateVertices()
        {
            using (var data = new DatalayerDataContext())
            {
                foreach (var edge in data.ActivityTriggers)
                {
                    var source = App.Triggers.FirstOrDefault(x => x.Entity.Id == edge.TriggerId);
                    var target = App.Activities.FirstOrDefault(x => x.Entity.Id == edge.ActivityId);
                    if (source != null && target != null)
                        _graph.AddEdge(new Edge<object>(source, target));
                }
            }
        }

        private void TriggersOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args)
        {
            if (!Dispatcher.CheckAccess())
            {
                Dispatcher.Invoke(() => TriggersOnCollectionChanged(sender, args));
                return;
            }

            if (args.NewItems != null)
                foreach (var item in args.NewItems)
                    _graph.AddVertex(item);
            if (args.OldItems != null)
                foreach (var item in args.OldItems)
                    _graph.RemoveVertex(item);
            CreateVertices();
        }

        private void ActivitiesOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args)
        {
            if (!Dispatcher.CheckAccess())
            {
                Dispatcher.Invoke(() => TriggersOnCollectionChanged(sender, args));
                return;
            }

            if (args.NewItems != null)
                foreach (var item in args.NewItems)
                    _graph.AddVertex(item);
            if (args.OldItems != null)
                foreach (var item in args.OldItems)
                    _graph.RemoveVertex(item);
            CreateVertices();
        }

        private void Parameters_OnClick(object sender, RoutedEventArgs e)
        {
            GraphLayout.InvalidateVisual();
        }
    }
}
