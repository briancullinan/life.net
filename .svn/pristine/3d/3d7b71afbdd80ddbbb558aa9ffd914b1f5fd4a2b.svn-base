using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Life;
using Life.Utilities.Extensions;
using log4net;
using Activity = Life.Utilities.Activity;
using Trigger = Life.Utilities.Trigger;

namespace Messages.Activities
{
    class SynchronizeTrillian : Activity
    {
        private static DateTime _epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        private static readonly ILog Log = LogManager.GetLogger(typeof(SynchronizeTrillian));
        private readonly string _logs;
        private List<string> _skip; 
        private readonly List<string> _synchronized = new List<string>();

        public List<string> Skip
        {
            get { return GetValue<List<string>>(); }
            set { SetValue(value);
                _skip = new[] {"!"}.Union(value).ToList();
            }
        }

        private string[] _media =
            {
                "AIM","ICQ","JABBER","MSN","RENDEZVOUS","SKYPE",
                "XFIRE","YAHOO","FACEBOOK","GOOGLE","ICQ","IRC",
                "TWITTER","Unknown Medium"
            };

        public SynchronizeTrillian(Life.Activity activity, string logs, List<string> skip)
            : base(activity)
        {
            _logs = logs;
            _skip = skip ?? new List<string>();
            _skip.InsertRange(0, new[] { "!" });
        }

        public override void Execute(object context, ActivityQueue queue, Trigger trigger)
        {
            if (!Directory.Exists(_logs))
                return;

            var files = Directory.EnumerateFiles(_logs, "*.*", SearchOption.AllDirectories)
                                 .Where(x => (x.EndsWith(".xml") || x.EndsWith(".log")) && 
                                     !(Path.GetFileNameWithoutExtension(x) ?? "").Contains(" - "))
                                 .ToList();
            //files = new List<string> { "C:\\Users\\bjcullinan\\AppData\\Roaming\\Trillian\\users\\bjcullinan\\logs\\logs\\old logs\\AIM\\Query\\APTWIRLER.xml" };

            // read each files content
            var count = 0;
            foreach (var file in files)
            {
                if(file.IndexOf("prettyeuro", StringComparison.InvariantCultureIgnoreCase) > -1)
                {
                    
                }
                Log.Debug(string.Format("{0}% complete: {1}", Math.Round((double)count / files.Count * 100, 2), file));
                count++;
                var medium = (Path.GetFileNameWithoutExtension(file) ?? "").Split('-')[0].Trim();
                if(!_media.Contains(medium, StringComparer.InvariantCultureIgnoreCase))
                    medium = (Path.GetFileName(Path.GetDirectoryName(file) ?? "") ?? "").Trim();
                if (!_media.Contains(medium, StringComparer.InvariantCultureIgnoreCase))
                    medium = (Path.GetFileName(Path.GetDirectoryName(Path.GetDirectoryName(file) ?? "") ?? "") ?? "").Trim();
                if (!_media.Contains(medium, StringComparer.InvariantCultureIgnoreCase))
                {
                    Log.Debug(string.Format("Could not detect medium: {0}", file));
                    continue;
                }

                // create a dictionary of time and text
                var messages = new Dictionary<long, Tuple<string, string, string>>();
                var sessions = new List<Tuple<long, long>>();

                // always prefer the data read from xml as it is more precise, but some of the old files don't support this
                var from = (Path.GetFileNameWithoutExtension(file) ?? "").ToLowerInvariant();
                from = from.Replace(medium.ToLowerInvariant(), "");
                from = from.Trim().Trim('-').Trim();
                if (_synchronized.Contains(from))
                    continue;
                _synchronized.Add(from);

                var xmlFiles = files.Where(x => x.IndexOf(medium, StringComparison.InvariantCultureIgnoreCase) > -1 && 
                    x.EndsWith(from + ".xml", StringComparison.InvariantCultureIgnoreCase))
                                    .ToList();
                foreach (var xmlFile in xmlFiles)
                    try
                    {
                        LoadXml(xmlFile, ref sessions, ref messages);
                    }
                    catch(Exception ex)
                    {
                        Log.Debug(string.Format("Error in {0}", xmlFile), ex);
                    }

                var logFiles = files.Where(x => x.IndexOf(medium, StringComparison.InvariantCultureIgnoreCase) > -1 && 
                    x.EndsWith(from + ".log", StringComparison.InvariantCultureIgnoreCase))
                                    .ToList();
                foreach (var logFile in logFiles)
                    try
                    {
                        LoadLog(logFile, ref sessions, ref messages);
                    }
                    catch (Exception ex)
                    {
                        Log.Debug(string.Format("Error in {0}", logFile), ex);
                    }


                // add messages to database
                using (var data = new DatalayerDataContext())
                {
                    var ids = data.TrillianMessages
                                  .Where(x => x.From == from && x.Medium == medium)
                                  .Select(x => x.Id)
                                  .ToList();
                    foreach (var message in messages)
                    {
                        var msgId = new DateTime(message.Key*TimeSpan.TicksPerMillisecond);
                        if (ids.Contains(msgId)) continue;
                        var msg = new TrillianMessage
                            {
                                Id = msgId,
                                Medium = medium,
                                From = from,
                                To = message.Value.Item2 ?? "",
                                Message = message.Value.Item3
                            };
                        data.TrillianMessages.InsertOnSubmit(msg);
                    }

                    try
                    {
                        data.SubmitChanges();
                    }
                    catch (Exception ex)
                    {
                        Log.Error(string.Format("There was an error saving the chat log: {0} {1}",
                                                string.Join(Environment.NewLine, xmlFiles),
                                                string.Join(Environment.NewLine, logFiles)), ex);
                    }

                    if (sessions != null)
                        foreach (var session in sessions)
                        {
                            var start = new DateTime(session.Item1*TimeSpan.TicksPerMillisecond);
                            var stop = new DateTime(session.Item2*TimeSpan.TicksPerMillisecond);
                            if (data.TrillianSessions.Any(x => x.From == from && x.Start == start && x.Stop == stop))
                                continue;

                            var ses = new TrillianSession
                                {
                                    From = from,
                                    Start = start,
                                    Stop = stop
                                };
                            data.TrillianSessions.InsertOnSubmit(ses);
                        }

                    try
                    {
                        data.SubmitChanges();
                    }
                    catch (Exception ex)
                    {
                        Log.Error(string.Format("There was an error saving the chat sessions: {0} {1}",
                                                string.Join(Environment.NewLine, xmlFiles),
                                                string.Join(Environment.NewLine, logFiles)), ex);
                    }

                }
            }
        }

        private static bool LoadLog(
            string logFile,
            ref List<Tuple<long, long>> sessions,
            ref Dictionary<long, Tuple<string, string, string>> messages)
        {
            using (var stream = new FileStream(
                logFile,
                FileMode.Open,
                FileAccess.Read,
                FileShare.ReadWrite))
            {
                using (var file = new StreamReader(stream))
                {
                    string line;
                    var msgList = new List<Tuple<string, string, string>>();
                    DateTime? start = null;
                    long startLong = 0;
                    while ((line = file.ReadLine()) != null)
                    {
                        if (string.IsNullOrEmpty(line.Trim()))
                            continue;

                        var match = Regex.Match(line, @"session start \(.*\):\s*(?<date>.*)", RegexOptions.IgnoreCase);
                        if (match.Success)
                        {
                            // Fri Apr 09 00:04:54 2010 -0700
                            DateTime tmp;
                            if (!DateTime.TryParseExact(
                                match.Groups["date"].Value.TrimEnd('0'),
                                new[] { "ddd MMM dd HH:mm:ss yyyy zz", "ddd MMM dd HH:mm:ss yyyy" },
                                CultureInfo.InvariantCulture,
                                DateTimeStyles.AssumeLocal | DateTimeStyles.AdjustToUniversal,
                                out tmp))
                                throw new NotImplementedException();

                            start = tmp;
                            startLong = GetKey(start.Value);
                        }

                        else if (
                            (match =
                             Regex.Match(line, @"session close \(.*\):\s*(?<date>.*)", RegexOptions.IgnoreCase))
                                .Success)
                        {
                            DateTime end;
                            if (!DateTime.TryParseExact(
                                match.Groups["date"].Value.TrimEnd('0'),
                                new[] { "ddd MMM dd HH:mm:ss yyyy zz", "ddd MMM dd HH:mm:ss yyyy" },
                                CultureInfo.InvariantCulture,
                                DateTimeStyles.AssumeLocal | DateTimeStyles.AdjustToUniversal,
                                out end))
                                throw new NotImplementedException();

                            var endLong = GetKey(end);

                            if (start == null)
                            {
                                Log.Debug("Start not set!");
                                continue;
                            }

                            // record session
                            if (!sessions.Any(x => x.Item1 == GetKey(start.Value) && x.Item2 == GetKey(end)))
                                sessions.Add(new Tuple<long, long>(GetKey(start.Value), GetKey(end)));

                            // organize messages
                            var range = messages.Where(x => x.Key <= endLong && x.Key >= startLong)
                                              .ToDictionary(x => x.Key, x => x.Value);
                            if (range.Any())
                            {
                                var last = GetKey(start.Value);
                                var differences = new List<Tuple<string, string, string>>();

                                // merge messages with input from xml
                                foreach (var msg in msgList)
                                {
                                    // try to find the message text in the current range
                                    KeyValuePair<long, Tuple<string, string, string>> item;
                                    if ((item = range.FirstOrDefault(x => x.Value.Item3 == msg.Item3)).Value == null)
                                    {
                                        differences.Add(msg);
                                    }
                                    else
                                    {
                                        // space the messages evenly over the last known date and the current known date
                                        var increment = GetIncrement(differences.Count, last, endLong,
                                                                     messages.Keys.ToList());
                                        for (var i = 0; i < differences.Count; i++)
                                            try
                                            {
                                                messages.Add(last + (i + 1)*increment, differences[i]);
                                            }
                                            catch
                                            {
                                                Log.Debug(
                                                    string.Format("Error adding: {0}, message collides with: {1} - {2}",
                                                                  last + (i + 1)*increment,
                                                                  messages[last + (i + 1)*increment],
                                                                  differences[i]));
                                            }
                                        last = item.Key;

                                        // remove it from the list in case the text of the message is exactly the same it will continue linearly.
                                        range.Remove(item.Key);
                                        differences.Clear();
                                    }
                                }

                                // if there are any messages remaining use the end date to space them
                                if (differences.Any())
                                {
                                    var increment = GetIncrement(differences.Count, last, endLong,
                                                                 messages.Keys.ToList());
                                    for (var i = 0; i < differences.Count; i++)
                                        try
                                        {
                                            messages.Add(last + (i + 1)*increment, differences[i]);
                                        }
                                        catch
                                        {
                                            Log.Debug(
                                                string.Format("Error adding: {0}, message collides with: {1} - {2}",
                                                              last + (i + 1)*increment,
                                                              messages[last + (i + 1)*increment],
                                                              differences[i]));
                                        }
                                }

                                msgList.Clear();
                            }
                            else
                            {
                                // since there are no times, space the messages evenly over the session
                                var increment = GetIncrement(msgList.Count, startLong, endLong, messages.Keys.ToList());
                                for (var i = 0; i < msgList.Count; i++)
                                    try
                                    {
                                        messages.Add(startLong + (i + 1)*increment, msgList[i]);
                                    }
                                    catch
                                    {
                                        Log.Debug(string.Format("Error adding: {0}, message collides with: {1} - {2}",
                                                                startLong + (i + 1) * increment,
                                                                messages[startLong + (i + 1) * increment],
                                                                msgList[i]));
                                    }

                            }

                            start = null;
                        }

                        else if (start == null)
                        {
                            //Log.Debug(string.Format("Session unknown, discarding line: {0}", line));
                        }

                        else
                        {
                            // try to get the date from the message line, [02/29/2008 01:30:13 PM]
                            var msg = Regex.Match(line, "^\\[(?<date>[0-9]{2}\\/[0-9]{2}\\/[0-9]{4} [0-9]{2}:[0-9]{2}(:[0-9]{2})? (AM|PM))\\]\\s+(?<from>[^\\[\\]]*?):\\s+(?<msg>.*)$");
                            if (msg.Success)
                            {
                                // we know the exact date so just add it to the dictionary
                                DateTime tmp;
                                if (!DateTime.TryParseExact(
                                    msg.Groups["date"].Value,
                                    new[] { "MM/dd/yyyy hh:mm:ss tt", "dd/MM/yyyy hh:mm tt", "MM/dd/yyyy hh:mm tt" },
                                    CultureInfo.InvariantCulture,
                                    DateTimeStyles.AssumeLocal | DateTimeStyles.AdjustToUniversal,
                                    out tmp))
                                    throw new NotImplementedException();

                                var key = GetKey(tmp);
                                if (!messages.ContainsKey(key))
                                    messages.Add(key,
                                                 new Tuple<string, string, string>(msg.Groups["from"].Value.Trim(), "",
                                                                                   msg.Groups["msg"].Value.Trim()));

                                msgList.Add(new Tuple<string, string, string>(msg.Groups["from"].Value.Trim(), "",
                                                                                   msg.Groups["msg"].Value.Trim()));
                            }
                            else if ((msg = Regex.Match(line, "^\\[(?<date>[0-9]{2}:[0-9]{2})\\]\\s+(?<from>[^\\[\\]]*?):\\s+(?<msg>.*)$")).Success)
                            {
                                DateTime tmp;
                                if (!DateTime.TryParseExact(
                                    msg.Groups["date"].Value,
                                    new[] {"HH:mm"},
                                    CultureInfo.InvariantCulture,
                                    DateTimeStyles.AssumeLocal | DateTimeStyles.AdjustToUniversal,
                                    out tmp))
                                    throw new NotImplementedException();

                                var key = GetKey(start.Value.Date + tmp.TimeOfDay);
                                if (!messages.ContainsKey(key))
                                    messages.Add(key,
                                             new Tuple<string, string, string>(msg.Groups["from"].Value.Trim(), "",
                                                                               msg.Groups["msg"].Value.Trim()));
                                msgList.Add(new Tuple<string, string, string>(msg.Groups["from"].Value.Trim(), "",
                                                                                   msg.Groups["msg"].Value.Trim()));

                            }
                            else if ((msg = Regex.Match(line, "^(?<from>[^\\[\\]]*?):\\s+(?<msg>.*)$")).Success)
                            {
                                msgList.Add(new Tuple<string, string, string>(msg.Groups["from"].Value.Trim(), "",
                                                                              msg.Groups["msg"].Value.Trim()));
                            }
                            else
                            {
                                msgList.Add(new Tuple<string, string, string>("", "", line));
                            }
                        }
                    }
                }
            }

            return true;
        }

        private static bool LoadXml(string xmlFile, ref List<Tuple<long, long>> sessions, ref Dictionary<long, Tuple<string, string, string>> messages)
        {
            var overlaps = new List<Tuple<string, string, string>>();

            // used below for recording sessions
            DateTime? start = null;

            using (var stream = new FileStream(
                xmlFile,
                FileMode.Open,
                FileAccess.Read,
                FileShare.ReadWrite))
            {
                var nt = new NameTable();
                var mgr = new XmlNamespaceManager(nt);
                var pc = new XmlParserContext(nt, mgr, "", XmlSpace.Default);

                var reader = XmlReader.Create(
                    new SanitizedStream(stream),
                    new XmlReaderSettings
                        {
                            ConformanceLevel = ConformanceLevel.Fragment,
                            ValidationType = ValidationType.None,
                            ValidationFlags = XmlSchemaValidationFlags.None,
                            NameTable = nt,
                            IgnoreWhitespace = true
                        }, pc);
                while (reader.Read())
                {
                    if (reader.NodeType != XmlNodeType.Element || (reader.LocalName != "message" && reader.LocalName != "session")) continue;

                    try
                    {
                        using (var msgReader = reader.ReadSubtree())
                        {
                            msgReader.Read();
                            var msgEl = XNode.ReadFrom(msgReader) as XElement;
                            if (msgEl == null) continue;
                            var timeStr = msgEl.Attribute("time").Value;
                            var time = timeStr.Length > 10
                                           ? _epoch.AddMilliseconds(long.Parse(timeStr))
                                           : _epoch.AddSeconds(int.Parse(timeStr));
                            var timeLong = GetKey(time);

                            // record session elements and continue
                            if (msgEl.Name.LocalName == "session")
                            {
                                switch (msgEl.AttributeValue("type"))
                                {
                                    case "start":
                                        start = time;
                                        break;
                                    case "stop":
                                        DateTime? stop = time;

                                        if (start == null)
                                        {
                                            Log.Debug("Starts not set!");
                                            continue;
                                        }

                                        if (!sessions.Any(x => x.Item1 == GetKey(start.Value) && x.Item2 == GetKey(stop.Value)))
                                            sessions.Add(new Tuple<long, long>(GetKey(start.Value), GetKey(stop.Value)));
                                        break;
                                }

                                continue;
                            }

                            // resolve overlaps, assumes messages are sequential
                            if (!messages.ContainsKey(timeLong) && overlaps.Any())
                            {
                                var increment = GetIncrement(overlaps.Count, messages.Last().Key, timeLong, messages.Keys.ToList());
                                for (var i = 0; i < overlaps.Count; i++)
                                    try
                                    {
                                        messages.Add(messages.Last().Key + (i + 1)*increment, overlaps[i]);
                                    }
                                    catch
                                    {
                                        Log.Debug(string.Format("Error adding: {0}, message collides with: {1} - {2}",
                                                                messages.Last().Key + (i + 1) * increment,
                                                                messages[messages.Last().Key + (i + 1) * increment],
                                                                overlaps[i]));
                                    }

                                overlaps.Clear();
                            }

                            // if there are two messages at exactly the same time insert them later
                            var message = HttpUtility.HtmlDecode(HttpUtility.UrlDecode(msgEl.AttributeValue("text") ?? "")).Trim();
                            if (messages.ContainsKey(timeLong))
                                overlaps.Add(
                                    new Tuple<string, string, string>(
                                        msgEl.AttributeValue("from"),
                                        msgEl.AttributeValue("to"),
                                        message));
                            else
                            {
                                messages.Add(timeLong, new Tuple<string, string, string>(
                                                       msgEl.AttributeValue("from"),
                                                       msgEl.AttributeValue("to"),
                                                       message));
                            }
                        }
                    }
                    catch
                        (Exception ex)
                    {
                        Log.Warn("Error reading event.", ex);
                    }
                }
            }

            // empty any remaining overlaps
            if (overlaps.Any())
            {
                var increment = GetIncrement(overlaps.Count, messages.Last().Key, GetKey(File.GetLastWriteTimeUtc(xmlFile)), messages.Keys.ToList());
                for (var i = 0; i < overlaps.Count; i++)
                    try
                    {
                        messages.Add(messages.Last().Key + (i + 1)*increment, overlaps[i]);
                    }
                    catch
                    {
                        Log.Debug(string.Format("Error adding: {0}, message collides with: {1} - {2}",
                                                messages.Last().Key + (i + 1) * increment,
                                                messages[messages.Last().Key + (i + 1) * increment],
                                                overlaps[i]));
                    }
            }

            return true;
        }

        private static long GetKey(DateTime time)
        {
            return (long)Math.Floor(Convert.ToDouble(time.Ticks / TimeSpan.TicksPerMillisecond) / 10) * 10;
        }

        private static long GetIncrement(int count, long start, long end, IList<long> keys)
        {
            var startFloor = (long)Math.Floor(Convert.ToDouble(start / TimeSpan.TicksPerMillisecond) / 10) * 10;
            var endFloor = (long)Math.Floor(Convert.ToDouble(end / TimeSpan.TicksPerMillisecond) / 10) * 10;
            var increment = (long)Math.Floor((endFloor - startFloor) / (double)(count + 1) / 10) * 10;
            if (increment < 10)
                increment = 10;
            var newKeys = Enumerable.Range(0, count).Select(i => start + (i + 1)*increment).ToList();
            if (keys.Intersect(newKeys).Any())
                Log.Debug("Collissions detected.");
            return increment;
        }
    }
}
