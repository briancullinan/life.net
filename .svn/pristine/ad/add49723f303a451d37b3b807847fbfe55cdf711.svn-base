using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Soap;
using System.Text;
using log4net;

namespace Life.Utilities
{
    public static class Parameters
    {
        private static readonly ILog Log = LogManager.GetLogger(typeof(Parameters));

        internal static object[] Get(object item, Type type)
        {
            // get state information for the current activity or trigger
            Dictionary<string, string> values;
            if (item as Life.Trigger != null)
                values = ((Life.Trigger)item).Parameters.ToDictionary(x => x.Name.ToLowerInvariant(), x => x.Value);
            else if (item as Life.Activity != null)
                values = ((Life.Activity)item).States.ToDictionary(x => x.Parameter.ToLowerInvariant(), x => x.Value);
            else
                throw new NotImplementedException();

            // put args in right order
            object[] args = null;
            var constructors = type.GetConstructors();
            foreach (var constructor in constructors)
            {
                // try to match constructor by name
                var @params = constructor.GetParameters().ToDictionary(x => x.Name.ToLowerInvariant(), x => x);
                var argValues = @params.ToDictionary(x => x.Key.ToLowerInvariant(), x => (object)null);
                argValues = argValues.ToDictionary(x => x.Key.ToLowerInvariant(), x =>
                {
                    try
                    {
                        var paramType = @params[x.Key].ParameterType;

                        // if the type is trigger, insert passed in value
                        if (paramType == item.GetType())
                            return item;

                        // if using the params attribute
                        if (paramType.IsArray &&
                            @params[x.Key].GetCustomAttributes(typeof(ParamArrayAttribute), false).Any())
                            paramType = paramType.GetElementType();

                        // handle missing and optional parameters
                        if (!values.ContainsKey(x.Key) && @params[x.Key].IsOptional)
                            return @params[x.Key].DefaultValue;
                        if (!values.ContainsKey(x.Key) || string.IsNullOrEmpty(values[x.Key]))
                            return Convert.ChangeType(null, paramType);

                        // use the value of the key in the database to initialize the object
                        var value = values[x.Key];
                        if (paramType == typeof(string))
                            return value;
                        // try parsing all the primitives
                        if (paramType.IsEnum)
                            return Enum.Parse(paramType, value);
                        if (paramType == typeof(bool))
                            return bool.Parse(value);

                        var serializer = new SoapFormatter();
                        using (var stream = new MemoryStream(Encoding.ASCII.GetBytes(value)))
                            return serializer.Deserialize(stream);
                    }
                    catch (Exception ex)
                    {
                        Log.Error(string.Format("There was an error loading the object: {0}", x.Key), ex);
                        return null;
                    }
                });

                // check if there are any missing variables, must not be the right constructor
                //if (!argValues.All(x => x.Value != null || @params[x.Key].IsOptional)) continue;
                args = argValues.Select(x => x.Value).ToArray();
                break;
            }
            return (args ?? new[] { item });
        }
    }
}
