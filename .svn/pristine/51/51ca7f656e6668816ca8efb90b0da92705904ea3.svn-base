using System.IO;
using System.Windows;
using Trigger = Life.Utilities.Trigger;

namespace Files.Triggers
{
    //[TypeConverter(typeof (FilesystemElementConverter))]
    public class Watcher : Trigger
    {
        private readonly FileSystemWatcher _watcher;

        private Watcher(Life.Trigger trigger)
            : base(trigger)
        {
            Application.Current.Dispatcher.Invoke(() => Settings = new Controls.Watcher(this));
        }

        public Watcher(Life.Trigger trigger, string filename, NotifyFilters notify = NotifyFilters.LastWrite)
            : this(trigger)
        {
            _watcher = new FileSystemWatcher
                {
                    Path = Path.GetDirectoryName(filename),
                    NotifyFilter = notify,
                    EnableRaisingEvents = true,
                    Filter = Path.GetFileName(filename)
                };
            _watcher.Changed += (sender, args) => OnTriggered(filename);
        }

        public Watcher(Life.Trigger trigger, string path, string filter, NotifyFilters notify = NotifyFilters.LastWrite)
            : this(trigger)
        {
            _watcher = new FileSystemWatcher
                {
                    Path = path,
                    NotifyFilter = notify,
                    EnableRaisingEvents = true,
                    Filter = filter
                };
            _watcher.Changed += (sender, args) => OnTriggered(Path.Combine(path, filter));
        }

    }
}
