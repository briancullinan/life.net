#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Life
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Life")]
	public partial class DatalayerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivityTrigger(ActivityTrigger instance);
    partial void UpdateActivityTrigger(ActivityTrigger instance);
    partial void DeleteActivityTrigger(ActivityTrigger instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertTrigger(Trigger instance);
    partial void UpdateTrigger(Trigger instance);
    partial void DeleteTrigger(Trigger instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertActivityQueue(ActivityQueue instance);
    partial void UpdateActivityQueue(ActivityQueue instance);
    partial void DeleteActivityQueue(ActivityQueue instance);
    partial void InsertRelationText(RelationText instance);
    partial void UpdateRelationText(RelationText instance);
    partial void DeleteRelationText(RelationText instance);
    #endregion
		
		public DatalayerDataContext() : 
				base(global::Life.Properties.Settings.Default.LifeFile, mappingSource)
		{
			OnCreated();
		}
		
		public DatalayerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatalayerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatalayerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatalayerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ActivityTrigger> ActivityTriggers
		{
			get
			{
				return this.GetTable<ActivityTrigger>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<Trigger> Triggers
		{
			get
			{
				return this.GetTable<Trigger>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<ActivityQueue> ActivityQueues
		{
			get
			{
				return this.GetTable<ActivityQueue>();
			}
		}
		
		public System.Data.Linq.Table<RelationText> RelationTexts
		{
			get
			{
				return this.GetTable<RelationText>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityTrigger")]
	public partial class ActivityTrigger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityId;
		
		private int _TriggerId;
		
		private EntityRef<Trigger> _Trigger;
		
		private EntityRef<Activity> _Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    partial void OnTriggerIdChanging(int value);
    partial void OnTriggerIdChanged();
    #endregion
		
		public ActivityTrigger()
		{
			this._Trigger = default(EntityRef<Trigger>);
			this._Activity = default(EntityRef<Activity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TriggerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TriggerId
		{
			get
			{
				return this._TriggerId;
			}
			set
			{
				if ((this._TriggerId != value))
				{
					if (this._Trigger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTriggerIdChanging(value);
					this.SendPropertyChanging();
					this._TriggerId = value;
					this.SendPropertyChanged("TriggerId");
					this.OnTriggerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trigger_ActivityTrigger", Storage="_Trigger", ThisKey="TriggerId", OtherKey="Id", IsForeignKey=true)]
		public Trigger Trigger
		{
			get
			{
				return this._Trigger.Entity;
			}
			set
			{
				Trigger previousValue = this._Trigger.Entity;
				if (((previousValue != value) 
							|| (this._Trigger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trigger.Entity = null;
						previousValue.ActivityTriggers.Remove(this);
					}
					this._Trigger.Entity = value;
					if ((value != null))
					{
						value.ActivityTriggers.Add(this);
						this._TriggerId = value.Id;
					}
					else
					{
						this._TriggerId = default(int);
					}
					this.SendPropertyChanged("Trigger");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ActivityTrigger", Storage="_Activity", ThisKey="ActivityId", OtherKey="Id", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.ActivityTriggers.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.ActivityTriggers.Add(this);
						this._ActivityId = value.Id;
					}
					else
					{
						this._ActivityId = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameter")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Value;
		
		private int _TriggerId;
		
		private EntityRef<Trigger> _Trigger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnTriggerIdChanging(int value);
    partial void OnTriggerIdChanged();
    #endregion
		
		public Parameter()
		{
			this._Trigger = default(EntityRef<Trigger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TriggerId", DbType="Int NOT NULL")]
		public int TriggerId
		{
			get
			{
				return this._TriggerId;
			}
			set
			{
				if ((this._TriggerId != value))
				{
					if (this._Trigger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTriggerIdChanging(value);
					this.SendPropertyChanging();
					this._TriggerId = value;
					this.SendPropertyChanged("TriggerId");
					this.OnTriggerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trigger_Parameter", Storage="_Trigger", ThisKey="TriggerId", OtherKey="Id", IsForeignKey=true)]
		public Trigger Trigger
		{
			get
			{
				return this._Trigger.Entity;
			}
			set
			{
				Trigger previousValue = this._Trigger.Entity;
				if (((previousValue != value) 
							|| (this._Trigger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trigger.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._Trigger.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._TriggerId = value.Id;
					}
					else
					{
						this._TriggerId = default(int);
					}
					this.SendPropertyChanged("Trigger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Trigger]")]
	public partial class Trigger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private System.DateTime _TimeAdded = default(System.DateTime);
		
		private bool _Enabled;
		
		private EntitySet<ActivityTrigger> _ActivityTriggers;
		
		private EntitySet<Parameter> _Parameters;
		
		private EntitySet<ActivityQueue> _ActivityQueues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public Trigger()
		{
			this._ActivityTriggers = new EntitySet<ActivityTrigger>(new Action<ActivityTrigger>(this.attach_ActivityTriggers), new Action<ActivityTrigger>(this.detach_ActivityTriggers));
			this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
			this._ActivityQueues = new EntitySet<ActivityQueue>(new Action<ActivityQueue>(this.attach_ActivityQueues), new Action<ActivityQueue>(this.detach_ActivityQueues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeAdded", AutoSync=AutoSync.OnInsert, DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime TimeAdded
		{
			get
			{
				return this._TimeAdded;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trigger_ActivityTrigger", Storage="_ActivityTriggers", ThisKey="Id", OtherKey="TriggerId")]
		public EntitySet<ActivityTrigger> ActivityTriggers
		{
			get
			{
				return this._ActivityTriggers;
			}
			set
			{
				this._ActivityTriggers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trigger_Parameter", Storage="_Parameters", ThisKey="Id", OtherKey="TriggerId")]
		public EntitySet<Parameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trigger_ActivityQueue", Storage="_ActivityQueues", ThisKey="Id", OtherKey="TriggerId")]
		public EntitySet<ActivityQueue> ActivityQueues
		{
			get
			{
				return this._ActivityQueues;
			}
			set
			{
				this._ActivityQueues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityTriggers(ActivityTrigger entity)
		{
			this.SendPropertyChanging();
			entity.Trigger = this;
		}
		
		private void detach_ActivityTriggers(ActivityTrigger entity)
		{
			this.SendPropertyChanging();
			entity.Trigger = null;
		}
		
		private void attach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Trigger = this;
		}
		
		private void detach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Trigger = null;
		}
		
		private void attach_ActivityQueues(ActivityQueue entity)
		{
			this.SendPropertyChanging();
			entity.Trigger = this;
		}
		
		private void detach_ActivityQueues(ActivityQueue entity)
		{
			this.SendPropertyChanging();
			entity.Trigger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Value;
		
		private int _ActivityId;
		
		private EntityRef<Activity> _Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    #endregion
		
		public State()
		{
			this._Activity = default(EntityRef<Activity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="Int NOT NULL")]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_State", Storage="_Activity", ThisKey="ActivityId", OtherKey="Id", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.States.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._ActivityId = value.Id;
					}
					else
					{
						this._ActivityId = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private System.DateTime _TimeAdded = default(System.DateTime);
		
		private bool _Enabled;
		
		private EntitySet<ActivityTrigger> _ActivityTriggers;
		
		private EntitySet<State> _States;
		
		private EntitySet<ActivityQueue> _ActivityQueues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public Activity()
		{
			this._ActivityTriggers = new EntitySet<ActivityTrigger>(new Action<ActivityTrigger>(this.attach_ActivityTriggers), new Action<ActivityTrigger>(this.detach_ActivityTriggers));
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			this._ActivityQueues = new EntitySet<ActivityQueue>(new Action<ActivityQueue>(this.attach_ActivityQueues), new Action<ActivityQueue>(this.detach_ActivityQueues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeAdded", AutoSync=AutoSync.OnInsert, DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime TimeAdded
		{
			get
			{
				return this._TimeAdded;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ActivityTrigger", Storage="_ActivityTriggers", ThisKey="Id", OtherKey="ActivityId")]
		public EntitySet<ActivityTrigger> ActivityTriggers
		{
			get
			{
				return this._ActivityTriggers;
			}
			set
			{
				this._ActivityTriggers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_State", Storage="_States", ThisKey="Id", OtherKey="ActivityId")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ActivityQueue", Storage="_ActivityQueues", ThisKey="Id", OtherKey="ActivityId")]
		public EntitySet<ActivityQueue> ActivityQueues
		{
			get
			{
				return this._ActivityQueues;
			}
			set
			{
				this._ActivityQueues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityTriggers(ActivityTrigger entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_ActivityTriggers(ActivityTrigger entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_ActivityQueues(ActivityQueue entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_ActivityQueues(ActivityQueue entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityQueue")]
	public partial class ActivityQueue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TriggerId;
		
		private int _ActivityId;
		
		private string _State;
		
		private System.Nullable<System.DateTime> _TimeCompleted;
		
		private System.Nullable<System.DateTime> _TimeStarted;
		
		private System.DateTime _TimeAdded;
		
		private EntityRef<Activity> _Activity;
		
		private EntityRef<Trigger> _Trigger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTriggerIdChanging(int value);
    partial void OnTriggerIdChanged();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnTimeCompletedChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeCompletedChanged();
    partial void OnTimeStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStartedChanged();
    partial void OnTimeAddedChanging(System.DateTime value);
    partial void OnTimeAddedChanged();
    #endregion
		
		public ActivityQueue()
		{
			this._Activity = default(EntityRef<Activity>);
			this._Trigger = default(EntityRef<Trigger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TriggerId", DbType="Int NOT NULL")]
		public int TriggerId
		{
			get
			{
				return this._TriggerId;
			}
			set
			{
				if ((this._TriggerId != value))
				{
					if (this._Trigger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTriggerIdChanging(value);
					this.SendPropertyChanging();
					this._TriggerId = value;
					this.SendPropertyChanged("TriggerId");
					this.OnTriggerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="Int NOT NULL")]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(MAX)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeCompleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeCompleted
		{
			get
			{
				return this._TimeCompleted;
			}
			set
			{
				if ((this._TimeCompleted != value))
				{
					this.OnTimeCompletedChanging(value);
					this.SendPropertyChanging();
					this._TimeCompleted = value;
					this.SendPropertyChanged("TimeCompleted");
					this.OnTimeCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStarted", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStarted
		{
			get
			{
				return this._TimeStarted;
			}
			set
			{
				if ((this._TimeStarted != value))
				{
					this.OnTimeStartedChanging(value);
					this.SendPropertyChanging();
					this._TimeStarted = value;
					this.SendPropertyChanged("TimeStarted");
					this.OnTimeStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeAdded", DbType="DateTime NOT NULL")]
		public System.DateTime TimeAdded
		{
			get
			{
				return this._TimeAdded;
			}
			set
			{
				if ((this._TimeAdded != value))
				{
					this.OnTimeAddedChanging(value);
					this.SendPropertyChanging();
					this._TimeAdded = value;
					this.SendPropertyChanged("TimeAdded");
					this.OnTimeAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_ActivityQueue", Storage="_Activity", ThisKey="ActivityId", OtherKey="Id", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.ActivityQueues.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.ActivityQueues.Add(this);
						this._ActivityId = value.Id;
					}
					else
					{
						this._ActivityId = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trigger_ActivityQueue", Storage="_Trigger", ThisKey="TriggerId", OtherKey="Id", IsForeignKey=true)]
		public Trigger Trigger
		{
			get
			{
				return this._Trigger.Entity;
			}
			set
			{
				Trigger previousValue = this._Trigger.Entity;
				if (((previousValue != value) 
							|| (this._Trigger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trigger.Entity = null;
						previousValue.ActivityQueues.Remove(this);
					}
					this._Trigger.Entity = value;
					if ((value != null))
					{
						value.ActivityQueues.Add(this);
						this._TriggerId = value.Id;
					}
					else
					{
						this._TriggerId = default(int);
					}
					this.SendPropertyChanged("Trigger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelationText")]
	public partial class RelationText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Left;
		
		private string _Right;
		
		private string _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLeftChanging(string value);
    partial void OnLeftChanged();
    partial void OnRightChanging(string value);
    partial void OnRightChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public RelationText()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Left]", Storage="_Left", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Left
		{
			get
			{
				return this._Left;
			}
			set
			{
				if ((this._Left != value))
				{
					this.OnLeftChanging(value);
					this.SendPropertyChanging();
					this._Left = value;
					this.SendPropertyChanged("Left");
					this.OnLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Right]", Storage="_Right", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Right
		{
			get
			{
				return this._Right;
			}
			set
			{
				if ((this._Right != value))
				{
					this.OnRightChanging(value);
					this.SendPropertyChanging();
					this._Right = value;
					this.SendPropertyChanged("Right");
					this.OnRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
