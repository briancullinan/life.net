using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using Life.Utilities.Extensions;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using log4net;

namespace Life.Utilities
{
    public delegate void ActivityResult(Activity activity, object result);

    public abstract class Activity : Parameters
    {
        private static readonly ILog Log = LogManager.GetLogger(typeof(Activity));
        private Life.Activity _activity;
        private string _inAddition;
        private ActivityResult _resulted;
        public event ActivityResult Resulted
        {
            [MethodImpl(MethodImplOptions.Synchronized)]
            add
            {
                ActivityResult handler2;
                var log = _resulted;
                do
                {
                    handler2 = log;
                    var handler3 = (ActivityResult)Delegate.Combine(handler2, value);
                    log = Interlocked.CompareExchange(ref _resulted, handler3, handler2);
                }
                while (log != handler2);
            }
            [MethodImpl(MethodImplOptions.Synchronized)]
            remove
            {
                ActivityResult handler2;
                var log = _resulted;
                do
                {
                    handler2 = log;
                    var handler3 = (ActivityResult)Delegate.Remove(handler2, value);
                    log = Interlocked.CompareExchange(ref _resulted, handler3, handler2);
                }
                while (log != handler2);
            }
        }

        protected void OnResulted(object obj)
        {
            var handler = _resulted;
            if (handler != null) _resulted(this, obj);
        }

        [Category("Results")]
        [Description("Some activities result in a trigger being fired on top of the current activity executing.  This section lists the triggers that fire when an activity is executed.")]
        [Editor(typeof(PrimitiveTypeCollectionEditor), typeof(PrimitiveTypeCollectionEditor))]
        public IEnumerable<Trigger> Result
        {
            get
            {
                if(_resulted == null)
                    return new List<Trigger>();
                var subs = _resulted.GetInvocationList();
                var triggers = subs.Select(x => x.Method.DeclaringType).Where(x => typeof (Trigger).IsAssignableFrom(x));
                return App.Triggers.Where(x => triggers.Contains(x.GetType())).ToList();
            }
        }

        protected Activity(Life.Activity activity)
        {
            _activity = activity;
        }

        public Life.Activity Entity
        {
            get { return _activity; }
            internal set { _activity = value; }
        }

        [Category("Common")]
        public bool Enabled
        {
            get { return Entity.Enabled; }
            set
            {
                Entity.Enabled = value;
                App.AppContext.SubmitChanges();
                OnPropertyChanged();
            }
        }

        public string Description
        {
            get
            {
                var parameters = Args(Entity, GetType());
                var result = string.Join("\n", parameters.Select(x => string.Format("{0} [{1}]", x, (x ?? new object()).GetType())));
                result += _inAddition;
                return result;
            }
            protected set
            {
                _inAddition = value;
                OnPropertyChanged();
            }
        }

        protected void SetValue(object obj, [CallerMemberName] string propertyName = null)
        {
            if (!this.IsConstructed())
                Log.Warn(string.Format("Value being set during construction: {0} [{1}]", propertyName, GetType()));

            Set(Entity, GetType(), propertyName, obj);
            OnPropertyChanged(propertyName);
        }

        protected T GetValue<T>([CallerMemberName] string propertyName = null)
        {
            var arg = Arg(Entity, GetType(), propertyName);
            if (arg is T)
                return (T)arg;
            return default(T);
        }

        public abstract void Execute(object context, ActivityQueue queue, Trigger trigger);
    }
}