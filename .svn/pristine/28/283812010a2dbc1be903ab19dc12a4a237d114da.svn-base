using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Soap;
using System.Text;
using System.Threading;
using log4net;

namespace Life
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App
    {
        #region "Fields"
        private static readonly ILog Log = LogManager.GetLogger(typeof(App));
        private static ObservableCollection<Utilities.Trigger> _triggers;
        private static ObservableCollection<Assembly> _plugins;
        private static ObservableCollection<Utilities.Activity> _activities;
        //private static readonly PerformanceCounter CpuCounter;
        //private static readonly PerformanceCounter RamCounter;
        //private static ManualResetEvent _loading = new ManualResetEvent(true);
        #endregion

        #region "Properties"
        public static ObservableCollection<Assembly> Plugins
        {
            get
            {
                if (_plugins == null)
                    Load_Plugins();
                return _plugins;
            }
        }

        public static ObservableCollection<Utilities.Activity> Activities
        {
            get
            {
                if (_activities == null)
                    Load_Activities();
                return _activities;
            }
        }

        public static ObservableCollection<Utilities.Trigger> Triggers
        {
            get
            {
                if (_triggers == null)
                    Load_Triggers();
                return _triggers;
            }
        }
        #endregion

        #region "Loading"

        private static void Load_Plugins()
        {
            // loop through each group box an load the plugins
            if (_plugins != null) return;
            _plugins = new ObservableCollection<Assembly>
                {
                    Assembly.GetExecutingAssembly()
                };
            var assemblyLoc = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? "";
            if (!Directory.Exists(Path.Combine(assemblyLoc, "Plugins"))) return;
            var pluginsDir = Directory.GetFiles(Path.Combine(assemblyLoc, "Plugins"));
            foreach (var dll in pluginsDir.Where(dll => Path.GetExtension(dll) == ".dll"))
            {
                try
                {
                    var plugin = Assembly.LoadFrom(dll);
                    _plugins.Add(plugin);
                }
                catch (Exception ex)
                {
                    Log.Debug(string.Format("There was an error loading the plugin: {0}", dll), ex);
                }
            }
        }

        private static void Load_Triggers()
        {
            if (_triggers != null) return;
            _triggers = new ObservableCollection<Utilities.Trigger>();
            if (_plugins == null) Load_Plugins();
            var data = new DatalayerDataContext();
            var savedTriggers = data.Triggers.ToList();
            foreach (var trigger in savedTriggers)
            {
                var type = Type.GetType(trigger.Type);
                var assembly = Plugins.FirstOrDefault(x => (type = x.GetType(trigger.Type)) != null);
                if (type != null && assembly != null && typeof (Utilities.Trigger).IsAssignableFrom(type))
                {
                    var args = GetParameters(trigger, type);
                    var newTrigger = (Utilities.Trigger) Activator.CreateInstance(type, args);
                    newTrigger.Triggered += Triggered;
                    _triggers.Add(newTrigger);
                }
                else
                    Log.Error(string.Format("There was an error creating the trigger: {0} : {1}", trigger.Id,
                                            trigger.Type));
            }
        }

        private static void Load_Activities()
        {
            if (_activities != null) return;
            _activities = new ObservableCollection<Utilities.Activity>();
            // load assemblies
            if (_plugins == null) Load_Plugins();
            // loop through each activity and instantiate
            var data = new DatalayerDataContext();
            var savedActivites = data.Activities.ToList();
            foreach (var activity in savedActivites)
            {
                try
                {
                    var type = Type.GetType(activity.Type);
                    var assembly = Plugins.FirstOrDefault(x => (type = x.GetType(activity.Type)) != null);
                    if (type == null || assembly == null || !typeof (Utilities.Activity).IsAssignableFrom(type))
                        throw new Exception("Defined activity is not a derivitive of Activity.");

                    var args = GetParameters(activity, type);
                    var newActivity = (Utilities.Activity) Activator.CreateInstance(type, args);
                    _activities.Add(newActivity);
                }
                catch (Exception ex)
                {
                    Log.Error(string.Format("There was an error creating the activity: {0} : {1}", activity.Id,
                                            activity.Type), ex);
                }
            }
        }

        #endregion

        private static void Triggered(Utilities.Trigger trigger, dynamic state)
        {
            // queue the trigger for processing
            var context = new DatalayerDataContext();
            var activityTriggers = trigger.Entity.ActivityTriggers
                                          .Select(x => Activities
                                                           .FirstOrDefault(y => y.Entity.Id == x.ActivityId))
                                          .Where(x => x != null)
                                          .ToList();
            if (!activityTriggers.Any())
                return;

            // try to serialize state information
            try
            {
                using (var mem = new MemoryStream())
                {
                    var serlializer = new SoapFormatter
                        {
                            AssemblyFormat = FormatterAssemblyStyle.Full
                        };
                    serlializer.Serialize(mem, state);
                    state = Encoding.Default.GetString(mem.ToArray());
                    foreach (var activity in activityTriggers)
                    {
                        var queue = new ActivityQueue
                            {
                                ActivityId = activity.Entity.Id,
                                State = state
                            };
                        context.ActivityQueues.InsertOnSubmit(queue);
                    }
                }
                context.SubmitChanges();
            }
            catch (Exception ex)
            {
                Log.Error("Error queuing triggered activities.", ex);
            }
            ProcessQueue();
        }

        private static void ProcessQueue()
        {
            // check memory usage
            /*var memStatus = new WinBase.MEMORYSTATUSEX();
            float installedMemory = 10;
            if (Kernel32.GlobalMemoryStatusEx(memStatus))
            {
                installedMemory = (float)memStatus.ullAvailPhys/memStatus.ullTotalPhys*100;
            }

            // check network usage
            const string TEMPFILE = "tempfile.tmp";
            var webClient = new System.Net.WebClient();

            Console.WriteLine("Downloading file....");

            var sw = Stopwatch.StartNew();
            webClient.DownloadFile("http://dl.google.com/googletalk/googletalk-setup.exe", TEMPFILE);
            sw.Stop();

            var fileInfo = new FileInfo(TEMPFILE);
            var speed = fileInfo.Length / sw.Elapsed.Seconds;

            Console.WriteLine("Download duration: {0}", sw.Elapsed);
            Console.WriteLine("File size: {0}", fileInfo.Length.ToString("N0"));
            Console.WriteLine("Speed: {0} bps ", speed.ToString("N0"));

            // check cpu usage
            if (CpuCounter.NextValue() < 90 &&
                installedMemory > 10)
            {
            */

            var queue = new DatalayerDataContext();
            var items = queue.ActivityQueues.Where(x => x.TimeStarted == null && x.TimeCompleted == null).ToList();
            foreach (var item in items)
                {
                    ThreadPool.QueueUserWorkItem(ExecuteActivity, item.Id);
                }
        }

        private static void ExecuteActivity(object state)
        {
            var id = (int)state;
            using (var context = new DatalayerDataContext())
            {
                Utilities.Activity activity;
                ActivityQueue queue;
                try
                {
                    queue = context.ActivityQueues.First(x => x.Id == id);
                    queue.TimeStarted = DateTime.UtcNow;
                    context.SubmitChanges();
                    activity = Activities.FirstOrDefault(x => x.Entity.Id == queue.ActivityId);
                    if(activity == null)
                        throw new Exception("Activity doesn't exist.");
                }
                catch (Exception ex)
                {
                    Log.Error("An error occurred while saving the start time of the activity.", ex);
                    return;
                }

                try
                {
                    var serializer = new SoapFormatter();

                    using (var stream = new MemoryStream(Encoding.Default.GetBytes(queue.State)))
                    {
                        AppDomain.CurrentDomain.AssemblyResolve += LoadComponentAssembly;
                        var paramState = serializer.Deserialize(stream);
                        AppDomain.CurrentDomain.AssemblyResolve -= LoadComponentAssembly;
                        activity.Execute(paramState);
                    }
                }
                catch (Exception ex)
                {
                    Log.Error(
                        string.Format("An exception occured while executing activity: {0} {1}", queue.Id,
                                      queue.Activity.Type), ex);
                }

                try
                {
                    context.ActivityQueues.First(x => x.Id == queue.Id).TimeCompleted = DateTime.UtcNow;
                    // delete old items from queue
                    var oldActivities = context.ActivityQueues.Where(
                        x => x.TimeCompleted < DateTime.UtcNow.Subtract(TimeSpan.FromHours(6)));
                    if (!oldActivities.Any()) return;
                    context.ActivityQueues.DeleteAllOnSubmit(oldActivities);
                    context.SubmitChanges();
                }
                catch (Exception ex)
                {
                    Log.Error(
                        string.Format("There was an error removing the activity from the queue: {0}",
                                      queue.Id), ex);
                }
            }
        }

        static App()
        {
            var load = new Thread(state =>
                {
                    Load_Activities();
                    Load_Triggers();
                });
            load.SetApartmentState(ApartmentState.STA);
            load.Start();

            //CpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
            //RamCounter = new PerformanceCounter("Memory", "Available MBytes");
            //diskTransfersPerSec = new PerformanceCounter("PhysicalDisk", "Disk Transfers/sec", "1 G:", "servername");
        }


// Method for event

        private static Assembly LoadComponentAssembly(object sender, ResolveEventArgs args)
        {
            return Plugins.FirstOrDefault(x => x.FullName == args.Name);
        }

        [STAThread]
        public static void Main()
        {
            var app = new App();
            app.InitializeComponent();
            app.Run();
        }

        private static object[] GetParameters(object item, Type type)
        {
            // get state information for the current activity or trigger
            Dictionary<string, string> values;
            if (item as Trigger != null)
                values = ((Trigger) item).Parameters.ToDictionary(x => x.Name.ToLowerInvariant(), x => x.Value);
            else if (item as Activity != null)
                values = ((Activity) item).States.ToDictionary(x => x.Parameter.ToLowerInvariant(), x => x.Value);
            else
                throw new NotImplementedException();

            // put args in right order
            object[] args = null;
            var constructors = type.GetConstructors();
            foreach (var constructor in constructors)
            {
                // try to match constructor by name
                var @params = constructor.GetParameters().ToDictionary(x => x.Name.ToLowerInvariant(), x => x);
                var argValues = @params.ToDictionary(x => x.Key.ToLowerInvariant(), x => (object) null);
                argValues = argValues.ToDictionary(x => x.Key.ToLowerInvariant(), x =>
                    {
                        try
                        {
                            var paramType = @params[x.Key].ParameterType;

                            // if the type is trigger, insert passed in value
                            if (paramType == item.GetType())
                                return item;

                            // if using the params attribute
                            if (paramType.IsArray &&
                                @params[x.Key].GetCustomAttributes(typeof (ParamArrayAttribute), false).Any())
                                paramType = paramType.GetElementType();

                            // handle missing and optional parameters
                            if (!values.ContainsKey(x.Key) && @params[x.Key].IsOptional)
                                return @params[x.Key].DefaultValue;
                            if (!values.ContainsKey(x.Key) || string.IsNullOrEmpty(values[x.Key]))
                                return Convert.ChangeType(null, paramType);

                            // use the value of the key in the database to initialize the object
                            var value = values[x.Key];
                            if (paramType == typeof(string))
                                return value;
                            // try parsing all the primitives
                            if (paramType.IsEnum)
                                return Enum.Parse(paramType, value);
                            if (paramType == typeof(bool))
                                return bool.Parse(value);

                            var serializer = new SoapFormatter();
                            using (var stream = new MemoryStream(Encoding.ASCII.GetBytes(value)))
                                return serializer.Deserialize(stream);
                        }
                        catch (Exception ex)
                        {
                            Log.Error(string.Format("There was an error loading the object: {0}", x.Key), ex);
                            return null;
                        }
                    });

                // check if there are any missing variables, must not be the right constructor
                //if (!argValues.All(x => x.Value != null || @params[x.Key].IsOptional)) continue;
                args = argValues.Select(x => x.Value).ToArray();
                break;
            }
            return (args ?? new[] {item});
        }
    }
}
