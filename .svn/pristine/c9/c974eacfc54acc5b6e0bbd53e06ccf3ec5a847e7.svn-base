using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using Life.Utilities.Extensions;
using log4net;

namespace Life.Utilities
{
    public abstract class Activity : Parameters
    {
        private static readonly ILog Log = LogManager.GetLogger(typeof(Activity));
        private Life.Activity _activity;
        private string _inAddition;

        protected Activity(Life.Activity activity)
        {
            _activity = activity;
        }

        public Life.Activity Entity
        {
            get { return _activity; }
            internal set { _activity = value; }
        }

        [Category("Common")]
        public bool Enabled
        {
            get { return Entity.Enabled; }
            set
            {
                Entity.Enabled = value;
                App.AppContext.SubmitChanges();
                OnPropertyChanged();
            }
        }

        public string Description
        {
            get
            {
                var parameters = Args(Entity, GetType());
                var result = string.Join("\n", parameters.Select(x => string.Format("{0} [{1}]", x, (x ?? new object()).GetType())));
                result += _inAddition;
                return result;
            }
            protected set
            {
                _inAddition = value;
                OnPropertyChanged();
            }
        }

        protected void SetValue(object obj, [CallerMemberName] string propertyName = null)
        {
            if (!this.IsConstructed())
                Log.Warn(string.Format("Value being set during construction: {0} [{1}]", propertyName, GetType()));

            Set(Entity, GetType(), propertyName, obj);
            OnPropertyChanged(propertyName);
        }

        protected T GetValue<T>([CallerMemberName] string propertyName = null)
        {
            var arg = Arg(Entity, GetType(), propertyName);
            if (arg is T)
                return (T)arg;
            return default(T);
        }

        public abstract void Execute(object context, Trigger trigger);
    }
}